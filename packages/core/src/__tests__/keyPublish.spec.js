// @flow

import { tcrypto, utils } from '@tanker/crypto';

import { expect } from './chai';

import makeUint8Array from './makeUint8Array';

import {
  serializeKeyPublish,
} from '../Blocks/payloads';

import { unserializeKeyPublishToDevice, unserializeKeyPublish, unserializeKeyPublishToProvisionalUser, SEALED_KEY_SIZE, TWO_TIMES_SEALED_KEY_SIZE } from '../Resource/keyPublish';

describe('key publish', () => {
  it('correctly deserializes a KeyPublishV1 test vector', async () => {
    const keyPublish = {
      recipient: new Uint8Array([
        0xbd, 0xec, 0xe7, 0xbe, 0x4c, 0xd6, 0xc8, 0x33, 0xec, 0xf9, 0x42, 0xe1, 0xa9, 0xc4, 0xa7, 0x3e,
        0x39, 0xac, 0xdd, 0x6d, 0x99, 0x37, 0xc2, 0x9a, 0xbf, 0xf8, 0x6c, 0x4f, 0xce, 0x3a, 0x34, 0xcd
      ]),
      resourceId: new Uint8Array([
        0x21, 0x2c, 0x54, 0x3a, 0xae, 0xcf, 0xc6, 0xef, 0x0b, 0x60, 0xae, 0xe6, 0x11, 0x52, 0xa1, 0x30,
      ]),
      key: new Uint8Array([
        0x0b, 0x5a, 0xa5, 0x9e, 0xf1, 0x8e, 0x5c, 0xef, 0x61, 0xc4, 0x95, 0x26, 0x77, 0xe2, 0xb6, 0x96,
        0x55, 0x96, 0xbd, 0xbe, 0x7d, 0x8f, 0xfc, 0x8e, 0x9b, 0xd4, 0xeb, 0xab, 0xd3, 0xaf, 0xa1, 0x36,
        0x01, 0x00, 0x8b, 0x86, 0x08, 0xea, 0xb4, 0xa4, 0x90, 0x67, 0x66, 0xbd, 0x4c, 0xb0, 0x08, 0xe3,
        0x01, 0x00, 0x8b, 0x86, 0x08, 0xea, 0xb4, 0xa4, 0x90, 0x67, 0x66, 0xbd, 0x4c, 0xb0, 0x08, 0xe3,
        0x01, 0x00, 0x8b, 0x86, 0x08, 0xea, 0xb4, 0xa4
      ]),
    };

    const payload = utils.concatArrays(
      keyPublish.recipient,
      keyPublish.resourceId,
      new Uint8Array([keyPublish.key.length]),
      keyPublish.key
    );

    expect(unserializeKeyPublishToDevice(payload)).to.deep.equal(keyPublish);
  });

  it('should throw when unserializeKeyPublishToDevice with invalid key publish key size', async () => {
    const keyPublish = {
      recipient: new Uint8Array(tcrypto.HASH_SIZE),
      resourceId: new Uint8Array(tcrypto.MAC_SIZE),
      key: new Uint8Array(0),
    };

    const payload = utils.concatArrays(
      keyPublish.recipient,
      keyPublish.resourceId,
      new Uint8Array([keyPublish.key.length]),
      keyPublish.key
    );
    expect(() => unserializeKeyPublishToDevice(payload)).to.throw();
  });

  it('correctly deserializes a KeyPublishV2 test vector', async () => {
    const keyPublish = {
      recipient: makeUint8Array('recipient user', tcrypto.HASH_SIZE),
      resourceId: makeUint8Array('resource mac', tcrypto.MAC_SIZE),
      key: makeUint8Array('encrypted key...', SEALED_KEY_SIZE),
    };

    const payload = new Uint8Array([
      0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6d, 0x61, 0x63, 0x00, 0x00, 0x00, 0x00,
      0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x2e, 0x2e,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]);

    expect(unserializeKeyPublish(payload)).to.deep.equal(keyPublish);
    expect(serializeKeyPublish(keyPublish)).to.deep.equal(payload);
  });

  it('correctly serializes/deserializes a KeyPublish to provisional user test vector', async () => {
    const keyPublish = {
      recipient: makeUint8Array('recipient user', tcrypto.SIGNATURE_PUBLIC_KEY_SIZE * 2),
      resourceId: makeUint8Array('resource mac', tcrypto.MAC_SIZE),
      key: makeUint8Array('encrypted key...', TWO_TIMES_SEALED_KEY_SIZE),
    };

    const payload = new Uint8Array([
      0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6d, 0x61, 0x63, 0x00, 0x00, 0x00, 0x00,
      0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x2e, 0x2e,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]);

    expect(serializeKeyPublish(keyPublish)).to.deep.equal(payload);
    expect(unserializeKeyPublishToProvisionalUser(payload)).to.deep.equal(keyPublish);
  });
});
